// Generated by Xata Codegen 0.28.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Tokenomics",
    columns: [
      { name: "votes", type: "int" },
      { name: "wallets", type: "multiple" },
    ],
  },
  {
    name: "Wallets",
    columns: [
      { name: "voted_chain", type: "string" },
      { name: "voted_name", type: "string" },
      { name: "voted_ticker", type: "string" },
      { name: "Coins_Per_ETH", type: "bool" },
      { name: "Coins_Per_Vote", type: "bool" },
      { name: "Presale_Mint_Limit", type: "bool" },
      { name: "Total_Supply", type: "bool" },
      { name: "Total_Votes", type: "bool" },
    ],
  },
  { name: "Tickers", columns: [{ name: "votes", type: "int" }] },
  { name: "Names", columns: [{ name: "votes", type: "int" }] },
  { name: "Chains", columns: [{ name: "votes", type: "int" }] },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Tokenomics = InferredTypes["Tokenomics"];
export type TokenomicsRecord = Tokenomics & XataRecord;

export type Wallets = InferredTypes["Wallets"];
export type WalletsRecord = Wallets & XataRecord;

export type Tickers = InferredTypes["Tickers"];
export type TickersRecord = Tickers & XataRecord;

export type Names = InferredTypes["Names"];
export type NamesRecord = Names & XataRecord;

export type Chains = InferredTypes["Chains"];
export type ChainsRecord = Chains & XataRecord;

export type DatabaseSchema = {
  Tokenomics: TokenomicsRecord;
  Wallets: WalletsRecord;
  Tickers: TickersRecord;
  Names: NamesRecord;
  Chains: ChainsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Blake-Hatch-s-workspace-a0lhrv.us-east-1.xata.sh/db/CYOMC",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
